@model ThreadVM
@inject LoadStaticContent _staticData;
@inject Forum.Models.Subscriber _tenant;
@{
    ViewData["Title"] = Model.Title;
}
    <link href="~/vendor/summernote/summernote-lite.css" rel="stylesheet" />

<div class="col-md-8 col-xs-8 col-lg-8">

    <div class="topics">
        <div class="topics__heading">
            <h2 class="topics__heading-title">@Model.Title</h2>
            <div class="topics__heading-info">
                <a asp-action="ChannelThreads" asp-controller="Channels" asp-route-channel="@Model.Category.Channel.Name" class="category"><i class="bg-3ebafa"></i> @Model.Category.Channel.Name</a>

                <a asp-action="CategoryThreads" asp-controller="Channels" asp-route-category="@Model.Category.Name" class="category"><i class="bg-3ebafa"></i> @Model.Category.Name</a>
                <div class="tags">
                    @{
                        if (!string.IsNullOrEmpty(Model.Tags))
                        {
                            string[] threadTags = Model.Tags.Split(',');
                            string colourCode;
                            for (int i = 0; i < threadTags.Length; i++)
                            {
                                if (i == 0) colourCode = "bg-4f80b0";
                                else if (i % 2 == 0) colourCode = "bg-a3d39c";
                                else colourCode = "bg-8781bd";

                                <a href="#" class="@colourCode"> @threadTags[i]</a>
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <div class="topics__body">
            <div class="topics__content">
                <!-- post -->
                <div class="topic">
                    <div class="topic__head">
                        <div class="topic__avatar">
                            @{ string userImage;
                                userImage = string.IsNullOrEmpty(Model.AuthorImageUrl) ? "~/fonts/icons/avatars/B.svg" : Model.AuthorImageUrl;
                            }
                            <a href="@Url.Action("UserProfile","Profile", new { userId = Model.AuthorId})" class="avatar"><img src="@userImage" alt="avatar"></a>
                        </div>
                        <div class="topic__caption">
                            <div class="topic__name">
                                <a href="@Url.Action("UserProfile","Profile", new { userId = Model.AuthorId})">@Model.AuthorName</a>
                            </div>
                            <div class="topic__date"><i class="icon-Watch_Later"></i>@Model.DatePosted.ToLongDateString()</div>
                        </div>
                    </div>
                    <div class="topic__content">
                        <div class="topic__text">
                            <p id="threadContent">@Html.Raw(Model.Content)</p>
                            <div id="editContent" style="display:none;">
                                <textarea class="summernote" asp-for="Content" id="editThreadContent">

                            </textarea>
                                <a href="javascript:void(0);"  class="btn btn--type-02"  title="Update Thread" onclick="updateThread(@Model.Id)"><i class="icon-Save"></i>Update</a>
                            </div>
                           
                        </div>
                        <div class="topic__footer">
                            <div class="topic__footer-likes">
                                <div>
                                    <span class="topic__info-count" id="noOfFollows">0</span>
                                    <span class="topic__info-title">Follows</span>
                                </div>
                                <div>
                                    <span class="topic__info-count" id="noOfLikes">0</span>
                                    <span class="topic__info-title">Likes</span>
                                </div>
                                <div>
                                    <span class="topic__info-count" id="noOfBookmarks">0</span>
                                    <span class="topic__info-title">Bookmarks</span>
                                </div>
                                <div>
                                    <span class="topic__info-count" id="noOfFlags">0</span>
                                    <span class="topic__info-title">Flags</span>
                                </div>
                            </div>
                            <div class="topic__footer-share">

                                <a href="javascript:void(0);" title="Reply Thread" onclick="showReplyForm()"><i class="icon-Reply_Fill"></i></a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="topics__control">
                    <a href="javascript:void(0);" title="Like" onclick="performThreadAction(@Model.Id, UserActionEnum.Like)" class="btn" id="likeThread"><i class="icon-Favorite_Topic"></i>Like</a>
                    <a href="javascript:void(0);" title="Bookmark" onclick="performThreadAction(@Model.Id, UserActionEnum.Bookmark)" class="btn" id="bookmarkThread"><i class="icon-Bookmark"></i>Bookmark</a>
                    <a href="javascript:void(0);" title="Flag" onclick="performThreadAction(@Model.Id, UserActionEnum.Flag)" class="btn" id="flagThread"><i class="icon-Flag_Topic"></i>Flag</a>
                    <a href="javascript:void(0);" title="Follow" onclick="performThreadAction(@Model.Id, UserActionEnum.Follow)" class="btn" id="followThread"><i class="icon-Track"></i>Follow</a>
                    <a href="javascript:void(0);" title="Reply Thread" class="btn btn--type-02" data-visible="desktop" onclick="showReplyForm()"><i class="icon-Reply_Fill"></i>Reply</a>
                </div>

                <div id="threadRepliesDiv">


                </div>

                <div class="create__section create__textarea">
                    <label class="create__label" for="content">Reply</label>

                    <textarea class="summernote" id="threadReply">

                    </textarea>

                    <a href="javascript:void(0);" title="Reply Thread" class="btn btn--type-02" onclick="replyThread(@Model.Id)"><i class="icon-Reply_Fill"></i>Reply</a>

                </div>


            </div>

        </div>
      

    </div>

</div>

<div class="col-md-3 col-xs-3 col-lg-3">


</div>


@section Scripts {
    <script src="~/vendor/summernote/summernote-lite.js"></script>

    <script>
        $(document).ready(function () {
           // increaseThreadView(@Model.Id);
            loadThreadInfo(@Model.Id);
            loadThreadUserInfo(@Model.Id);
            loadReplies(@Model.Id);

             $('#threadReply').summernote({
               placeholder: 'Reply',
                height: 300,
               toolbar: summernoteToolbar
            });


        });

         function increaseThreadView(threadId) {
                //don't do on reload
                axiosInstance.get('/Threads/IncreaseThreadView',
                    {
                        params: {
                            threadId: `${threadId}`
                        }
                    })
                    .then(res => {
                        if (res.data) {
                            if (res.data.status === 1) {
                                alert('views increased');
                            }
                        }
                    }).catch(error => {
                        alert('error');
                    });
            }

            function loadReplies(threadId) {
                axiosInstance.get(`/Threads/LoadReplies/`,
                    {
                        params: {
                            threadId: `${threadId}`
                        }
                    })
                    .then(res => {
                        if (res.data) {
                            if (res.data.status === 1) {
                                console.log("replies", res.data.data);
                                $('#threadRepliesDiv').empty();

                                if (res.data.data.length > 0) {
                                    $('#threadRepliesDiv').prepend(`
                                       <p><span id="noOfReplies">${res.data.data.length} </span> replies </p>
                                    `);

                                    $.each(res.data.data, function (i, j) {
                                        $('#threadRepliesDiv').append(`
                                                  <div class="topic">
                        @* add class topic--selected for flagged *@
                        <div class="topic__head">

                            <div class="topic__caption">
                                <div class="topic__name">
                                    <a href="/Profile/UserProfile?userId=${j.authorId}">${j.authorName}</a>
                                </div>

                            </div>
                        </div>
                        <div class="topic__content">
                            <div class="topic__text">
                                <p id="threadContent">${j.content}</p>
                            </div>
                            <div class="topic__footer">
                                <div class="topic__footer-likes">
                                    <div>
                                        <a href="javascript:void(0);" onclick="performReplyAction(${j.id}, ${UserActionEnum.Upvote})"><i class="icon-Upvote"></i></a>
                                        <span>${j.threadReplyInfo == null ? 0 : j.threadReplyInfo.upvote}</span>
                                    </div>
                                    <div>
                                        <a href="javascript:void(0);" onclick="performReplyAction(${j.id}, ${UserActionEnum.Downvote})"><i class="icon-Downvote"></i></a>
                                        <span>${j.threadReplyInfo == null ? 0 : j.threadReplyInfo.downvote}</span>
                                    </div>
                                    <div class="topic__date">
                                        <i class="icon-Watch_Later"></i>${j.datePosted}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                                        `);
                                    });
                                }
                                else {
                                    $('#threadRepliesDiv').prepend(
                                        `<p> <a href="javascript:void(0);" onclick="showReplyForm(@Model.Id)"> Be the first to reply to this post </a> </p>`);
                                }
                            }
                        }
                    }).catch(error => {
                        alert('error');
                    });
            }

            function loadThreadInfo(threadId) {
                axiosInstance.get(`/Threads/LoadThreadInfo/`,
                    {
                        params: {
                            threadId: `${threadId}`
                        }
                    })
                    .then(res => {
                        if (res.data) {
                            if (res.data.status === 1) {
                                if (res.data.data != null) {
                                    $('#noOfFollows').text(res.data.data.follows);
                                    $('#noOfLikes').text(res.data.data.likes);
                                    $('#noOfBookmarks').text(res.data.data.bookmarks);
                                    $('#noOfFlags').text(res.data.data.flags);
                                }
                            }
                        }
                    }).catch(error => {
                        alert('error');
                    });
            }

            function loadThreadUserInfo(threadId) {
                axiosInstance.get(`/Threads/LoadThreadUserInfo/`,
                    {
                        params: {
                            threadId: `${threadId}`
                        }
                    })
                    .then(res => {
                        if (res.data) {
                            if (res.data.status === 1) {
                                if (res.data.data != null) {
                                    if (res.data.data.liked === true) {
                                        $('#likeThread').text('Unlike');
                                        $('#likeThread').attr('title', 'Unlike');
                                    }
                                    else if (res.data.data.liked === false) {
                                        $('#likeThread').text('Like');
                                        $('#likeThread').attr('title', 'Like');
                                    }
                                    if (res.data.data.bookmarked === true) {
                                        $('#bookmarkThread').text('Bookmark');
                                        $('#bookmarkThread').attr('title', 'Remove Bookmark');
                                    }
                                    else if (res.data.data.bookmarked === false) {
                                        $('#bookmarkThread').text('Bookmark');
                                        $('#bookmarkThread').attr('title', 'Add Bookmark');
                                    }
                                    if (res.data.data.followed === true) {
                                        $('#followThread').text('Unfollow');
                                        $('#followThread').attr('title', 'Unfollow Tread');
                                    }
                                    else if (res.data.data.followed === false) {
                                        $('#followThread').text('Follow');
                                        $('#followThread').attr('title', 'Follow Tread');
                                    }
                                    if (res.data.data.flagged === true) {
                                        $('#flagThread').text('Unflag');
                                        $('#flagThread').attr('title', 'Unflag Thread');
                                    }
                                    else if (res.data.data.flagged === false) {
                                        $('#flagThread').text('Flag');
                                        $('#flagThread').attr('title', 'Flag Thread');
                                    }
                                }
                            }
                        }
                    }).catch(error => {
                        alert('error');
                    });
            }

        function editThread(content) {
            $('#editThreadContent').summernote({
                placeholder: '',
                height: 300,
                toolbar: summernoteToolbar
            });

              //$('#editContent').summernote('code', '');
            $('#editThreadContent').summernote('code', content);
            $('#editContent').show();
        }

        function updateThread(threadId) {
            axiosInstance.post(`/Threads/UpdateThread/`,
                {
                    ThreadId: threadId,
                    Content: $('#threadReply').summernote('code')
                })
                .then(res => {
                    if (res.data) {
                        if (res.data.status === 1) {
                            alert('thread updated');
                            location.reload();
                        }
                    }
                }).catch(error => {
                    alert('error');
                });
        }

        function showReplyForm() {

            $('#threadReply').focus();
        }

        function replyThread(threadId) {
            axiosInstance.post(`/Threads/ReplyThread/`,
                {
                    ThreadId: threadId,
                    Content: $('#threadReply').summernote('code')
                })
                .then(res => {
                    if (res.data) {
                        if (res.data.status === 1) {
                            alert('reply saved');
                            loadReplies(threadId);
                        }
                    }
                }).catch(error => {
                    alert('error');
                });
        }

        function performThreadAction(threadId, action) {
            axiosInstance.post(`/Threads/ThreadAction/`,
                {
                    ThreadId: threadId,
                    Action: action
                })
                .then(res => {
                    if (res.data) {
                        if (res.data.status === 1) {
                            loadThreadInfo(threadId);
                            loadThreadUserInfo(threadId);
                        }
                    }
                }).catch(error => {
                    alert('error');
                });
        }

        function performReplyAction(replyId, action) {
            axiosInstance.post(`/Threads/ReplyAction/`,
                {
                    ThreadReplyId: replyId,
                    Action: action
                })
                .then(res => {
                    if (res.data) {
                        if (res.data.status === 1) {
                            loadReplies(@Model.Id);
                        }
                    }
                }).catch(error => {
                    alert('error');
                });
        }

    </script>

}